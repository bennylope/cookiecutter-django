#!/usr/bin/env bash

# This script controls the app environment for Heroku commands
#
# General usage:
# > ./heroku <environment> <some Heroku CLI command>
#
# Deployment:
# > ./heroku <environment> deploy
#
# Django commands:
# > ./heroku <environment> run <Django management command and args>
#
# Production pipeline deployment:
# > ./heroku promote
#
# Example:
# > ./heroku staging config:set MY_ENV_VAR=something

usage()
{
cat << EOF
usage: $0 <environment_name> <commands> <args> <options>

This script wraps calls to the heroku toolbelt, allowing for simple access to
staging and production environments without recourse to verbose app name
arguments.

Specify an active environment name, either 'staging' or 'production', or a pan-
environment command like 'promote'
EOF
}

case "$1" in
  staging)
    APPNAME={{ cookiecutter.heroku_staging_app_name }}
    ;;
  production)
    APPNAME={{ cookiecutter.heroku_app_name }}
    ;;
  promote)
    heroku pipeline:diff --app={{ cookiecutter.heroku_staging_app_name }}
    read -p "Is this ready to promote to production? (y/n) " CONFIRM

    case "$CONFIRM" in
      y)
        ;;
      Y)
        ;;
      *)
        echo "Not promoting to production"
        exit
        ;;
    esac

    printf "Promoting to production...\n"
    heroku pipeline:promote --app={{ cookiecutter.heroku_staging_app_name }}
    heroku run migrate --app={{ cookiecutter.heroku_app_name }}
    exit
    ;;
  *)
    usage
    exit
    ;;
esac

case "$2" in
  deploy)
    git push heroku-$APPNAME master
    heroku run migrate --app=$APPNAME
    ;;
  run)
    heroku run python {{ cookiecutter.repo_name }}/manage.py "${@:3}" --app=$APPNAME
    ;;
esac

printf "\nExecuting in the $1 environment\n"
printf "heroku ${@:2} --app=$APPNAME\n\n"

heroku "${@:2}" --app="$APPNAME"
